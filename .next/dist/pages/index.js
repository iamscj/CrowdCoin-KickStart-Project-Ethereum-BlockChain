'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _factory = require('../ethereum/factory');

var _factory2 = _interopRequireDefault(_factory);

var _semanticUiReact = require('semantic-ui-react');

var _Layout = require('../components/Layout');

var _Layout2 = _interopRequireDefault(_Layout);

var _routes = require('../routes');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _jsxFileName = 'D:\\kickstart\\pages\\index.js?entry';


var styles = {
    address: {
        backgroundColor: 'lightgray',
        padding: '10px',
        borderRadius: '5px'
    }
};

var CampaignIndex = function (_Component) {
    (0, _inherits3.default)(CampaignIndex, _Component);

    function CampaignIndex() {
        (0, _classCallCheck3.default)(this, CampaignIndex);

        return (0, _possibleConstructorReturn3.default)(this, (CampaignIndex.__proto__ || (0, _getPrototypeOf2.default)(CampaignIndex)).apply(this, arguments));
    }

    (0, _createClass3.default)(CampaignIndex, [{
        key: 'renderCampaigns',
        value: function renderCampaigns() {
            var items = this.props.campaigns.map(function (address) {
                return {
                    key: address,
                    header: _react2.default.createElement('div', { style: styles.address, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 26
                        }
                    }, address),
                    description: _react2.default.createElement('div', {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 30
                        }
                    }, _react2.default.createElement(_routes.Link, { route: '/campaigns/' + address, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 31
                        }
                    }, _react2.default.createElement('a', {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 32
                        }
                    }, 'View Campaign'))),
                    fluid: true,
                    style: { overflowWrap: 'break-word' }
                };
            });

            return _react2.default.createElement(_semanticUiReact.Card.Group, { items: items, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 40
                }
            });
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(_Layout2.default, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 45
                }
            }, _react2.default.createElement('h3', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 46
                }
            }, 'Open Campaigns'), _react2.default.createElement(_routes.Link, { route: '/campaigns/new', __source: {
                    fileName: _jsxFileName,
                    lineNumber: 47
                }
            }, _react2.default.createElement('a', {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 48
                }
            }, _react2.default.createElement(_semanticUiReact.Button, {
                content: 'Create Campaign',
                icon: 'add circle',
                primary: true,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 49
                }
            }))), this.renderCampaigns());
        }
    }], [{
        key: 'getInitialProps',
        value: function () {
            var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
                var campaigns;
                return _regenerator2.default.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return _factory2.default.methods.getDeployedCampaigns().call();

                            case 2:
                                campaigns = _context.sent;
                                return _context.abrupt('return', { campaigns: campaigns });

                            case 4:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));

            function getInitialProps() {
                return _ref.apply(this, arguments);
            }

            return getInitialProps;
        }()
    }]);

    return CampaignIndex;
}(_react.Component);

exports.default = CampaignIndex;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInVua25vd24iXSwibmFtZXMiOlsiX2pzeEZpbGVOYW1lIiwic3R5bGVzIiwiYWRkcmVzcyIsImJhY2tncm91bmRDb2xvciIsInBhZGRpbmciLCJib3JkZXJSYWRpdXMiLCJDYW1wYWlnbkluZGV4IiwiX0NvbXBvbmVudCIsIl9fcHJvdG9fXyIsImFwcGx5IiwiYXJndW1lbnRzIiwia2V5IiwidmFsdWUiLCJyZW5kZXJDYW1wYWlnbnMiLCJpdGVtcyIsInByb3BzIiwiY2FtcGFpZ25zIiwibWFwIiwiaGVhZGVyIiwiY3JlYXRlRWxlbWVudCIsInN0eWxlIiwiX19zb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJkZXNjcmlwdGlvbiIsInJvdXRlIiwiZmx1aWQiLCJvdmVyZmxvd1dyYXAiLCJHcm91cCIsInJlbmRlciIsImNvbnRlbnQiLCJpY29uIiwicHJpbWFyeSIsIl9yZWYiLCJtYXJrIiwiX2NhbGxlZSIsIndyYXAiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwicHJldiIsIm5leHQiLCJtZXRob2RzIiwiZ2V0RGVwbG95ZWRDYW1wYWlnbnMiLCJjYWxsIiwic2VudCIsImFicnVwdCIsInN0b3AiLCJnZXRJbml0aWFsUHJvcHMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7QUFDQTs7OztBQUNBOztBQUNBOzs7O0FBQ0E7Ozs7QUFMQSxJQUFJQSxlQUFlLHNDQUFuQjs7O0FBT0EsSUFBSUMsU0FBUztBQUNUQyxhQUFTO0FBQ0xDLHlCQUFpQixXQURaO0FBRUxDLGlCQUFTLE1BRko7QUFHTEMsc0JBQWM7QUFIVDtBQURBLENBQWI7O0FBUUEsSUFBSUMsZ0JBQWdCLFVBQVVDLFVBQVYsRUFBc0I7QUFDdEMsNEJBQVVELGFBQVYsRUFBeUJDLFVBQXpCOztBQUVBLGFBQVNELGFBQVQsR0FBeUI7QUFDckIsc0NBQWdCLElBQWhCLEVBQXNCQSxhQUF0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